jar {
	extension 'nimjar'
}

ext {
	moduleName = "nimroda"
	stagingDir = "${moduleStagingDir}/${moduleName}"
	moduleClass = 'net.vs49688.nimrod.nimroda.NimrodAModule'
	moduleClassPath = ["natives/"]
}

repositories {
	mavenCentral();
}

configurations {
	embed
	compile.extendsFrom(embed)
}

dependencies {
	compile group:		'au.edu.uq.rcc',		name: 'nimrodok-interface',	version: '1.0'

	embed group:		'com.google.code.gson',	name: 'gson',				version: '2.8.0'
	embed group:		'net.java.dev.jna',		name: 'jna',				version: '4.4.0'

	testCompile group:	'junit',				name: 'junit',				version: '4.10'
}

task cleanStaging(type: Delete) {
	delete stagingDir
}

task setupStaging() {
	doFirst {
		file(stagingDir).mkdirs()
	}
}

task copyEmbedsToStaging(type: Copy, dependsOn: [setupStaging]) {
	from(configurations.embed) into ("${stagingDir}/lib")
	// Rename the .jar to ${jar.extension} (.nimjar)
	rename(/(.+)\.jar/, "\$1.${jar.extension}")
}

task generateModuleProperties(dependsOn: [copyEmbedsToStaging]) {
	doLast {
		def classPath = [jar.archiveName] +
			moduleClassPath +
			fileTree("${stagingDir}/lib").filter{it.name.endsWith(jar.extension)}.files.collect{"lib/${it.name}"}
		def moduleProperties = new File("${stagingDir}/module.properties")
		moduleProperties.createNewFile()
		moduleProperties.text = """\
module.mainClass = ${moduleClass}
module.classpath = ${classPath.join(';')}
"""
	}
}

task installStaging(type: Copy, dependsOn: [setupStaging, generateModuleProperties, jar]) {
	from('module/') into(stagingDir)
	from(jar.archivePath) into(stagingDir)
}

test {
	classpath += files("${projectDir}/module/natives")
}